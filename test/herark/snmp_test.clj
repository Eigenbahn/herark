(ns herark.snmp-test
  (:require [clojure.test :refer :all]
            [herark.core :refer :all]
            [herark.snmp :refer :all]
            [herark.test-tools :refer :all]
            [taoensso.timbre :as log]
            [clojure.core.match :refer [match]])
  (:import (org.snmp4j CommandResponderEvent)
           (java.net InetAddress)))


(deftest snmp-v2c-notification-to-map-conversion
  (testing "Given a CommandResponderEvent generated by a PDU sent locally with a security name"
    (let [sec-name "public"
          pdu (make-notification "1.3.6.1.6.3.1.1.5.3")
          event-promise (promise)
          processor (make-testing-processor :v2c (fn [^CommandResponderEvent e] (deliver event-promise e)))
          target-host (get-in processor [:processor :host])
          target-port (get-in processor [:processor :port])
          _ (send-pdu target-host target-port sec-name pdu)
          received-event (deref event-promise 2000 nil)]
      (testing "When we turn it into a map"
        (let [rcvd-map (as-map received-event)
              [t [a p]] (:peer-addr rcvd-map)]
          (log/debug rcvd-map)
          (is (= :udp-address t) "The peer address is UDP")
          (is (= (InetAddress/getByName "localhost") a) "The peer IP address is localhost")
          (is (and (integer? p) (> p 0) (< p 65535)) "The peer port is an integer within the port range")
          (is (= (:security-name rcvd-map) (vec (.getBytes sec-name))) "The security name is correct")
          (is (= (count (get-in rcvd-map [:pdu :var-binds])) 2) "The number of var-binds is 2, time-ticks and trap-oid")
          (is (= (get-in rcvd-map [:pdu :pdu-type]) -89) "The request type is TRAPv2")
          (is (not (nil? (get-in rcvd-map [:pdu :req-id]))) "There is a request id")
          (is (= 0 (get-in rcvd-map [:pdu :error-status])) "There is no error")
          (is (= 0 (get-in rcvd-map [:pdu :error-index])) "Error index points to 0")
          )))))
